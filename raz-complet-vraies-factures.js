// üßπ SCRIPT RAZ COMPLET - Pr√©paration Tests Factures R√©elles
// Ex√©cutez ce script dans la console F12 pour nettoyer compl√®tement l'environnement

console.log('üßπ === RAZ COMPLET D√âMARR√â ===');
console.log('üìÖ Date:', new Date().toLocaleString());

async function razComplet() {
    try {
        console.log('1Ô∏è‚É£ Nettoyage localStorage...');
        
        // Lister toutes les cl√©s avant nettoyage
        const keys = Object.keys(localStorage);
        console.log(`üîç Trouv√© ${keys.length} cl√©s localStorage:`, keys);
        
        // Nettoyer toutes les donn√©es MyConfort
        const mycomfortKeys = keys.filter(key => 
            key.includes('myconfort') || 
            key.includes('external') || 
            key.includes('invoice') ||
            key.includes('sync') ||
            key.includes('test')
        );
        
        mycomfortKeys.forEach(key => {
            localStorage.removeItem(key);
            console.log(`üóëÔ∏è Supprim√©: ${key}`);
        });
        
        console.log('2Ô∏è‚É£ Nettoyage sessionStorage...');
        sessionStorage.clear();
        
        console.log('3Ô∏è‚É£ Nettoyage IndexedDB...');
        if ('indexedDB' in window) {
            const databases = await indexedDB.databases();
            for (const db of databases) {
                if (db.name && (db.name.includes('myconfort') || db.name.includes('dexie'))) {
                    console.log(`üóëÔ∏è Suppression DB: ${db.name}`);
                    indexedDB.deleteDatabase(db.name);
                }
            }
        }
        
        console.log('4Ô∏è‚É£ Reset service externe...');
        if (window.externalInvoiceService) {
            try {
                // Arr√™ter la synchronisation
                window.externalInvoiceService.stopSync();
                console.log('üîÑ Synchronisation arr√™t√©e');
                
                // Vider les donn√©es en m√©moire
                if (window.externalInvoiceService.clearAll) {
                    window.externalInvoiceService.clearAll();
                    console.log('üßπ Donn√©es service nettoy√©es');
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Erreur nettoyage service:', error);
            }
        }
        
        console.log('5Ô∏è‚É£ Nettoyage cache navigateur...');
        if ('caches' in window) {
            const cacheNames = await caches.keys();
            for (const cacheName of cacheNames) {
                await caches.delete(cacheName);
                console.log(`üóëÔ∏è Cache supprim√©: ${cacheName}`);
            }
        }
        
        console.log('6Ô∏è‚É£ Verification nettoyage...');
        const remainingKeys = Object.keys(localStorage);
        const mycomfortRemaining = remainingKeys.filter(key => 
            key.includes('myconfort') || key.includes('external') || key.includes('invoice')
        );
        
        if (mycomfortRemaining.length === 0) {
            console.log('‚úÖ Nettoyage complet r√©ussi !');
        } else {
            console.log('‚ö†Ô∏è Cl√©s restantes:', mycomfortRemaining);
        }
        
        console.log('7Ô∏è‚É£ √âtat final:');
        console.log(`üìä localStorage: ${Object.keys(localStorage).length} cl√©s restantes`);
        console.log(`üìä sessionStorage: ${Object.keys(sessionStorage).length} cl√©s`);
        
        console.log('üéØ === RAZ COMPLET TERMIN√â ===');
        console.log('‚úÖ Environnement pr√™t pour vos vraies factures !');
        console.log('üîÑ Rechargement de la page dans 3 secondes...');
        
        // Recharger la page apr√®s 3 secondes
        setTimeout(() => {
            window.location.reload();
        }, 3000);
        
    } catch (error) {
        console.error('‚ùå Erreur durante le RAZ:', error);
    }
}

// Configuration pour tests avec vraies factures
function prepareRealEnvironment() {
    console.log('üè≠ Configuration environnement de production...');
    
    // Marquer comme environnement de production
    localStorage.setItem('myconfort-env-mode', 'production');
    localStorage.setItem('myconfort-real-test', 'true');
    localStorage.setItem('myconfort-test-timestamp', Date.now().toString());
    
    console.log('‚úÖ Configuration production appliqu√©e');
}

// Ex√©cution automatique
razComplet().then(() => {
    prepareRealEnvironment();
});

// Export pour utilisation manuelle
window.razComplet = {
    executeRaz: razComplet,
    prepareReal: prepareRealEnvironment,
    quickCheck: () => {
        console.log('üîç √âtat actuel:');
        console.log('localStorage:', Object.keys(localStorage).length, 'cl√©s');
        console.log('sessionStorage:', Object.keys(sessionStorage).length, 'cl√©s');
        console.log('Service externe:', !!window.externalInvoiceService);
        if (window.externalInvoiceService) {
            console.log('Factures externes:', window.externalInvoiceService.getAllInvoices().length);
        }
    }
};

console.log('üõ†Ô∏è Fonctions disponibles:');
console.log('- window.razComplet.executeRaz() : RAZ complet');
console.log('- window.razComplet.quickCheck() : V√©rification rapide');
console.log('- window.razComplet.prepareReal() : Config production');
