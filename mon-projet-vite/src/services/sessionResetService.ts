// services/sessionResetService.ts
// Service pour la r√©initialisation de fin de session
// Supprime tout sauf le stock physique

import { getDB } from '@/db/schema';

export interface SessionResetResult {
  success: boolean;
  message: string;
  details: string[];
  errors?: string[];
}

/**
 * Service de r√©initialisation de fin de session
 * Garde uniquement le stock physique, supprime tout le reste
 */
export class SessionResetService {
  
  /**
   * RAZ compl√®te de fin de session - GARDE LE STOCK
   * Supprime :
   * - Toutes les ventes de la session
   * - Tous les items du panier
   * - Les ch√®ques √† venir / r√®glements √† venir
   * - Les factures N8N en cache
   * - Les stats de vendeurs (remise √† z√©ro)
   * - Les sessions (fermeture propre)
   * - Le cache syst√®me
   * 
   * GARDE :
   * - Le stock physique (quantit√©s)
   * - Les produits du catalogue
   * - La configuration syst√®me
   */
  static async executeSessionReset(): Promise<SessionResetResult> {
    const details: string[] = [];
    const errors: string[] = [];
    
    try {
      console.log('üßπ D√âBUT DE LA RAZ DE FIN DE SESSION');
      console.log('üì¶ Conservation du stock physique uniquement');
      
      const db = getDB();
      
      // 1. Sauvegarder le stock physique avant suppression
      console.log('üíæ Sauvegarde du stock physique...');
      const stockSauvegarde = await db.stock.toArray();
      const stockQuantites = stockSauvegarde.reduce((acc, item) => {
        acc[item.id] = {
          physicalStock: item.physicalStock,
          minStock: item.minStock
        };
        return acc;
      }, {} as Record<string, { physicalStock: number; minStock: number }>);
      details.push(`üì¶ ${stockSauvegarde.length} produits en stock sauvegard√©s`);
      
      // 2. Fermer la session en cours proprement
      console.log('üîí Fermeture de la session...');
      try {
        await db.closeSession();
        details.push('‚úÖ Session ferm√©e correctement');
      } catch {
        console.warn('‚ö†Ô∏è Session d√©j√† ferm√©e ou inexistante');
        details.push('‚ö†Ô∏è Aucune session active √† fermer');
      }
      
      // 3. Supprimer TOUTES les ventes
      console.log('üóëÔ∏è Suppression des ventes...');
      await db.sales.clear();
      details.push(`üóëÔ∏è Toutes les ventes supprim√©es`);
      
      // 4. Supprimer TOUS les items de panier
      console.log('üõí Suppression des items de panier...');
      await db.cartItems.clear();
      details.push(`üõí Tous les items de panier supprim√©s`);
      
      // 5. Remettre √† z√©ro les stats vendeurs (mais garder les vendeurs)
      console.log('üë• RAZ des statistiques vendeurs...');
      const allVendors = await db.vendors.toArray();
      for (const vendor of allVendors) {
        await db.vendors.update(vendor.id, {
          totalSales: 0,
          dailySales: 0,
          salesCount: 0,
          averageTicket: 0,
          lastSaleDate: undefined,
          lastUpdate: Date.now()
        });
      }
      details.push(`üë• ${allVendors.length} vendeurs remis √† z√©ro`);
      
      // 6. Supprimer les mouvements de stock de vente (garder les r√©approvisionnements)
      console.log('üì¶ Nettoyage des mouvements de stock...');
      const deletedMovements = await db.stockMovements
        .where('type')
        .equals('sale')
        .delete();
      details.push(`üì¶ ${deletedMovements} mouvements de vente supprim√©s`);
      
      // 7. Supprimer TOUTES les analytics
      console.log('üìä Suppression des analytics...');
      await db.vendorAnalytics.clear();
      await db.productAnalytics.clear();
      details.push('üìä Toutes les analytics supprim√©es');
      
      // 8. Supprimer TOUTES les sessions (historique complet)
      console.log('üóÇÔ∏è Suppression de l\'historique des sessions...');
      await db.sessions.clear();
      details.push('üóÇÔ∏è Historique des sessions supprim√©');
      
      // 9. Nettoyer le cache syst√®me
      console.log('üßπ Nettoyage du cache...');
      await db.cache.clear();
      details.push('üßπ Cache syst√®me vid√©');
      
      // 10. Supprimer les factures N8N en cache (ch√®ques √† venir inclus)
      console.log('üìÑ Suppression des factures et ch√®ques √† venir...');
      try {
        // Supprimer le cache des factures N8N
        localStorage.removeItem('cachedInvoices');
        localStorage.removeItem('lastSyncTime');
        localStorage.removeItem('processedInvoicesIds');
        
        details.push('üìÑ Factures N8N et ch√®ques √† venir supprim√©s');
      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur lors du nettoyage des factures:', error);
        errors.push('Erreur partielle lors du nettoyage des factures');
      }
      
      // 11. Nettoyer le localStorage des donn√©es de session
      console.log('üíæ Nettoyage du localStorage...');
      const keysToRemove = [
        'myconfort-cart',
        'myconfort-sales', 
        'myconfort-current-vendor',
        'current_session_id',
        'lastSyncTime',
        'processedInvoicesIds',
        'stockMovements'
      ];
      
      keysToRemove.forEach(key => {
        localStorage.removeItem(key);
      });
      details.push(`üíæ ${keysToRemove.length} cl√©s localStorage nettoy√©es`);
      
      // 12. Restaurer UNIQUEMENT le stock physique
      console.log('üîÑ Restauration du stock physique...');
      let stockRestored = 0;
      for (const [productId, stockData] of Object.entries(stockQuantites)) {
        try {
          await db.stock.update(productId, {
            physicalStock: stockData.physicalStock,
            minStock: stockData.minStock,
            lastUpdate: Date.now()
          });
          stockRestored++;
        } catch (error) {
          console.warn(`‚ö†Ô∏è Impossible de restaurer le stock pour ${productId}:`, error);
        }
      }
      details.push(`üîÑ ${stockRestored} produits en stock restaur√©s`);
      
      console.log('‚úÖ RAZ DE FIN DE SESSION TERMIN√âE');
      
      return {
        success: true,
        message: `‚úÖ R√©initialisation de fin de session r√©ussie ! ${stockRestored} produits en stock conserv√©s.`,
        details
      };
      
    } catch (error) {
      console.error('‚ùå Erreur durant la RAZ de fin de session:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
      errors.push(errorMessage);
      
      return {
        success: false,
        message: '‚ùå Erreur durant la r√©initialisation de fin de session',
        details,
        errors
      };
    }
  }
  
  /**
   * RAZ UNIQUEMENT des ch√®ques √† venir / r√®glements √† venir
   * Garde tout le reste (ventes, session, stock)
   */
  static async clearPendingChecksOnly(): Promise<SessionResetResult> {
    const details: string[] = [];
    const errors: string[] = [];
    
    try {
      console.log('üßπ SUPPRESSION DES CH√àQUES √Ä VENIR UNIQUEMENT');
      
      // Supprimer les factures N8N en cache (qui contiennent les ch√®ques √† venir)
      localStorage.removeItem('cachedInvoices');
      localStorage.removeItem('lastSyncTime');
      localStorage.removeItem('processedInvoicesIds');
      
      details.push('üìÑ Ch√®ques √† venir et factures N8N supprim√©s');
      details.push('üí∞ Ventes de caisse conserv√©es');
      details.push('üì¶ Stock physique conserv√©');
      details.push('üë• Statistiques vendeurs conserv√©es');
      
      return {
        success: true,
        message: '‚úÖ Ch√®ques √† venir supprim√©s avec succ√®s',
        details
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression des ch√®ques √† venir:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
      errors.push(errorMessage);
      
      return {
        success: false,
        message: '‚ùå Erreur lors de la suppression des ch√®ques √† venir',
        details,
        errors
      };
    }
  }
  
  /**
   * V√©rification de l'√©tat avant RAZ
   * Affiche ce qui sera supprim√© et ce qui sera conserv√©
   */
  static async previewSessionReset(): Promise<{
    toDelete: Record<string, number>;
    toKeep: Record<string, number>;
  }> {
    try {
      const db = getDB();
      
      const [
        salesCount,
        cartItemsCount,
        vendorsCount,
        stockCount,
        movementsCount,
        sessionsCount,
        invoicesCount
      ] = await Promise.all([
        db.sales.count(),
        db.cartItems.count(),
        db.vendors.count(),
        db.stock.count(),
        db.stockMovements.count(),
        db.sessions.count(),
        db.cache.count()
      ]);
      
      // Compter les factures en cache
      const cachedInvoices = localStorage.getItem('cachedInvoices');
      const invoicesCacheCount = cachedInvoices ? JSON.parse(cachedInvoices).length : 0;
      
      return {
        toDelete: {
          'Ventes': salesCount,
          'Items panier': cartItemsCount,
          'Sessions': sessionsCount,
          'Mouvements de stock (ventes)': movementsCount,
          'Cache syst√®me': invoicesCount,
          'Factures N8N / Ch√®ques √† venir': invoicesCacheCount
        },
        toKeep: {
          'Produits en stock': stockCount,
          'Vendeurs (structure)': vendorsCount,
          'Configuration syst√®me': 1
        }
      };
      
    } catch (error) {
      console.error('Erreur lors de la pr√©visualisation:', error);
      return {
        toDelete: {},
        toKeep: {}
      };
    }
  }
}

export default SessionResetService;
