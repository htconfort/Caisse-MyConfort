import type { TabType } from '../types';
import { User, Package, Archive, BarChart, FileText, RotateCcw, RefreshCw, Receipt, Settings, CreditCard } from 'lucide-react';
import type { LucideIcon } from 'lucide-react';

// Configuration des onglets de navigation
export const tabs: Array<{id: TabType, label: string, icon: LucideIcon}> = [
  { id: 'vendeuse', label: 'Vendeuse', icon: User },
  { id: 'produits', label: 'Produits', icon: Package },
  { id: 'factures', label: 'Factures', icon: Receipt },
  { id: 'reglements', label: 'R√®glements', icon: CreditCard },
  { id: 'stock', label: 'Stock', icon: Archive },
  { id: 'ventes', label: 'Ventes', icon: BarChart },
  { id: 'annulation', label: 'Annulation', icon: RotateCcw },
  { id: 'ca', label: 'CA Instant', icon: BarChart },
  { id: 'gestion', label: 'Gestion', icon: Settings },
  { id: 'raz', label: 'RAZ', icon: RefreshCw },
];

// Configuration des cat√©gories de produits
export const categories = ['Matelas', 'Sur-matelas', 'Couettes', 'Oreillers', 'Plateau', 'Accessoires', 'Divers'] as const;

// Configuration des moyens de paiement (inspir√©s de Facturassion)
export const paymentMethods = [
  { id: 'cash', label: 'üíµ Esp√®ces', description: 'Paiement en esp√®ces' },
  { id: 'card', label: 'üí≥ Carte bleue', description: 'Paiement par carte bancaire' },
  { id: 'transfer', label: 'üè¶ Virement', description: 'Virement bancaire' },
  { id: 'check', label: 'üìù Ch√®que unique', description: 'Paiement par ch√®que' },
  { id: 'multiple_checks', label: 'üìù Ch√®ques multiples', description: 'Paiement √©chelonn√© par ch√®ques', needsDetails: true },
  { id: 'mixed', label: 'üîÑ Paiement mixte', description: 'Combinaison de plusieurs modes', needsDetails: true },
  { id: 'installment', label: 'üí∞ Acompte + Solde', description: 'Paiement avec acompte', needsDetails: true }
] as const;

// Messages de paiement selon le format Facturassion
export const getPaymentMessage = (method: string, amount: number, details?: { numberOfChecks?: number; amountPerCheck?: number; downPayment?: number; [key: string]: unknown }) => {
  switch (method) {
    case 'cash':
      return `Montant √† r√©gler : ${amount.toFixed(2)}‚Ç¨ par Esp√®ces`;
    case 'card':
      return `Montant √† r√©gler : ${amount.toFixed(2)}‚Ç¨ par Carte bleue`;
    case 'transfer':
      return `Montant √† r√©gler : ${amount.toFixed(2)}‚Ç¨ par Virement`;
    case 'check':
      return `Montant √† r√©gler : ${amount.toFixed(2)}‚Ç¨ par Ch√®que`;
    case 'multiple_checks': {
      const numberOfChecks = details?.numberOfChecks || 1;
      const amountPerCheck = details?.amountPerCheck || amount;
      return `Montant √† r√©gler : ${amount.toFixed(2)}‚Ç¨ par ${numberOfChecks} ch√®ques de ${amountPerCheck.toFixed(2)}‚Ç¨`;
    }
    case 'installment': {
      const downPayment = details?.downPayment || 0;
      const remaining = amount - downPayment;
      return `Acompte vers√© : ${downPayment.toFixed(2)}‚Ç¨ - Reste √† payer : ${remaining.toFixed(2)}‚Ç¨`;
    }
    default:
      return `Montant √† r√©gler : ${amount.toFixed(2)}‚Ç¨`;
  }
};
